openapi: 3.0.3

info:
  title: Gallium+ API
  description: L'API web de Gallium+, le nouveau logiciel de vente de l'ETIQ.
  contact:
    email: louis.devie@iut-dijon.u-bourgogne.fr
  version: rev1
  
servers:
  - url: no server
  
paths:
  /api/products:
    summary: La liste des produits
    
    get:
      summary: Récupère une liste des produits
      parameters:
        - name: availableOnly
          description: Récupère uniquement les produits disponibles
          in: query
          schema:
            type: boolean
            default: true
        - name: category
          description: Récupère uniquement les produits d'une catégorie
          in: query
          schema:
            type: integer
      responses:
        200:
          description: Une liste des produits correspondants
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Product' }
        500: { $ref: '#/components/responses/InternalServerError' }
          
    post:
      summary: Ajoute un produit
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Product' }
      responses:
        201: { $ref: '#/components/responses/Created' }
        400: { $ref: '#/components/responses/BadRequest' }
        500: { $ref: '#/components/responses/InternalServerError' }
          
    
  /api/products/{id}:
    summary: Un produit
    parameters:
      - name: id
        description: L'identifiant du produit
        in: path
        schema:
          type: integer
        required: true
       
    
    get:
      summary: Récupère un produit
      responses:
        200:
          description: Le produit correspondant
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
        400: { $ref: '#/components/responses/BadRequest' }
        404: { $ref: '#/components/responses/NotFound' }
        500: { $ref: '#/components/responses/InternalServerError' }
        
    put:
      summary: Modifie un produit
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Product' }
      responses:
        200: { $ref: '#/components/responses/Ok' }
        400: { $ref: '#/components/responses/BadRequest' }
        500: { $ref: '#/components/responses/InternalServerError' }
    
    delete:
      summary: Supprime un produit
      responses:
        200: { $ref: '#/components/responses/Ok' }
        400: { $ref: '#/components/responses/BadRequest' }
        500: { $ref: '#/components/responses/InternalServerError' }
        

components:
  schemas:
    Product:
      type: object
      properties:
        Id:
          type: integer
        Name:
          type: string
        Stock:
          type: integer
        NonMemberPrice:
          type: number
        MemberPrice:
          type: number
        Availability:
          type: string
          enum: [ALWAYS, AUTO, NEVER]
        Category:
          type: integer
          
  responses:
    Ok:
      description: La requête a réussi
    Created:
      description: La ressource a bien été créée
    BadRequest:
      description: La requête est malformée
    NotFound:
      description: La ressource demandée n'existe pas
    InternalServerError:
      description: Erreur interne au serveur